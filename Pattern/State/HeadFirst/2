# Stateパターン
## 使い所
- 内部状態によって振る舞いを変化させたいオブジェクトを実装する場合

## 実装方法
``` plantuml
@startuml
State <|-- ConcreteState1
State <|-- ConcreteState2
Context o- State
@enduml
```

## HeadFirst
### if文の実装の問題点
1. 状態がif文の構造に隠れて明確ではなくなる。
2. 1つの状態の変更が他の全ての状態に影響を与えてる。

### 改善するためには
1. 影響範囲をカプセル化するために各状態をクラス化する。
2. 各状態の振る舞いは各状態のオブジェクトに委譲する。

``` plantuml
@startuml
interface state{
    insertQuarter()
    ejectQuarter()
    turnCrank()
    dispense()
}

state <|-- SoldState
state <|-- SoldOutState
state <|-- NoQuarterState
state <|-- HasQuarterState
@enduml
```

### 改善手順
1. IStateインターフェースを実装
